<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensores Sat Arduino</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <header>
        <h1>Sensores Sat Arduino</h1>
        <p>Monitoreo en tiempo real de sensores ambientales</p>
    </header>
    <main>
        <div class="row">
            <div class="column">
                <div class="card">
                    <canvas id="myChart1"></canvas>
                    <div class="info-section" id="info1"></div>
                </div>
            </div>
            <div class="column">
                <div class="card">
                    <canvas id="myChart2"></canvas>
                    <div class="info-section" id="info2"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="column">
                <div class="card">
                    <canvas id="myChart3"></canvas>
                    <div class="info-section" id="info3"></div>
                </div>
            </div>
            <div class="column">
                <div class="card">
                    <canvas id="myChart4"></canvas>
                    <div class="info-section" id="info4"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="column">
                <div class="card">
                    <canvas id="myChart5"></canvas>
                    <div class="info-section" id="info5"></div>
                </div>
            </div>
        </div>
    </main>
    <footer>
        <p>&copy; 2024 Sensores Sat Arduino. Todos los derechos reservados.</p>
    </footer>

    <script>
        const myCharts = [];

        const fetchDataAndUpdateCharts = async () => {
            const url = 'https://api.thingspeak.com/channels/2598147/feeds.json?api_key=CKW23E2ED9JT2JQC&results=10';
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                const feeds = data.feeds;

                const labels = feeds.map(feed => new Date(feed.created_at).toLocaleString());
                const humedad = feeds.map(feed => parseFloat(feed.field1));
                const temperatura = feeds.map(feed => parseFloat(feed.field2));
                const lluvia = feeds.map(feed => parseFloat(feed.field3));
                const distancia = feeds.map(feed => parseFloat(feed.field4));
                const co = feeds.map(feed => parseFloat(feed.field5));

                updateChart(myCharts[0], labels, humedad, 'Humedad (%)', 1);
                updateChart(myCharts[1], labels, temperatura, 'Temperatura (°C)', 2);
                updateChart(myCharts[2], labels, lluvia, 'Lluvia (mm)', 3);
                updateChart(myCharts[3], labels, distancia, 'Distancia (m)', 4);
                updateChart(myCharts[4], labels, co, 'CO (ppm)', 5);
            } catch (error) {
                console.error('Fetch error:', error);
            }
        };

        const createChart = (ctx, label, data) => {
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: label,
                        data: data,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            beginAtZero: true
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        };

        const updateChart = (chart, labels, data, label, field) => {
            chart.data.labels = labels;
            chart.data.datasets[0].data = data;
            chart.update();

            const value = data[data.length - 1];
            const infoText = getInfoText(field, value);
            document.getElementById('info' + field).innerHTML = `<strong>${label} Actual:</strong> ${value}<br>${infoText}`;
        };

        const getInfoText = (field, value) => {
            switch (field) {
                case 1: // Humedad
                    return getHumedadInfo(value);
                case 2: // Temperatura
                    return getTemperaturaInfo(value);
                case 3: // Lluvia
                    return getLluviaInfo(value);
                case 4: // Distancia
                    return ""; // Placeholder para el futuro
                case 5: // CO
                    return getCOInfo(value);
                default:
                    return "";
            }
        };

        const getHumedadInfo = (value) => {
            if (value >= 40 && value <= 60) return "Valores Óptimos: 40% - 60%: Ideal para plantas y actividades al aire libre.";
            if (value >= 20 && value < 40) return "Valores No Óptimos: 20% - 40%: Puede causar sequedad en la vegetación.";
            if (value > 60 && value <= 80) return "Valores No Óptimos: 60% - 80%: Puede causar sensación de bochorno.";
            return "Agricultura: La humedad adecuada es crucial para el crecimiento de cultivos.";
        };

        const getTemperaturaInfo = (value) => {
            if (value >= 15 && value <= 25) return "Temperaturas Óptimas: 15°C - 25°C: Cómodas para actividades al aire libre.";
            if (value >= 5 && value < 15) return "Temperaturas No Óptimas: 5°C - 15°C: Requiere ropa adecuada para evitar el frío.";
            if (value > 25 && value <= 30) return "Temperaturas No Óptimas: 25°C - 30°C: Puede ser caluroso para algunas personas.";
            return value < 5 ? "Temperaturas Perjudiciales: Menos de 5°C: Riesgo de hipotermia." : "Temperaturas Perjudiciales: Más de 30°C: Riesgo de golpes de calor.";
        };

        const getLluviaInfo = (value) => {
            if (value >= 0 && value <= 300) return "El día está sin lluvias.";
            if (value > 300 && value <= 600) return "Hay una brisa y podría haber lluvia.";
            return "Está lloviendo fuerte.";
        };

        const getCOInfo = (value) => {
            if (value >= 0 && value <= 9) return "Valores Óptimos: 0 - 9 ppm: Sin riesgo para la salud.";
            if (value > 9 && value <= 50) return "Valores No Óptimos: 10 - 50 ppm: Leves efectos sobre la salud.";
            if (value > 50 && value <= 100) return "Valores Perjudiciales: 51 - 100 ppm: Síntomas serios pueden aparecer.";
            if (value > 100 && value <= 200) return "Valores Perjudiciales: 101 - 200 ppm: Riesgo de daño cerebral.";
            return "Valores Críticos: Más de 200 ppm: Puede ser fatal rápidamente.";
        };

        document.addEventListener('DOMContentLoaded', async () => {
            myCharts.push(createChart(document.getElementById('myChart1').getContext('2d'), 'Humedad (%)', []));
            myCharts.push(createChart(document.getElementById('myChart2').getContext('2d'), 'Temperatura (°C)', []));
            myCharts.push(createChart(document.getElementById('myChart3').getContext('2d'), 'Lluvia (mm)', []));
            myCharts.push(createChart(document.getElementById('myChart4').getContext('2d'), 'Distancia (m)', []));
            myCharts.push(createChart(document.getElementById('myChart5').getContext('2d'), 'CO (ppm)', []));
            await fetchDataAndUpdateCharts();
            setInterval(fetchDataAndUpdateCharts, 15000);
        });
    </script>
</body>
</html>